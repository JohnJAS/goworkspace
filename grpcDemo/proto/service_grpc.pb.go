// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DemoService_SimpleRPC_FullMethodName              = "/demo.DemoService/SimpleRPC"
	DemoService_ServerStreamRPC_FullMethodName        = "/demo.DemoService/ServerStreamRPC"
	DemoService_ClientStreamRPC_FullMethodName        = "/demo.DemoService/ClientStreamRPC"
	DemoService_BidirectionalStreamRPC_FullMethodName = "/demo.DemoService/BidirectionalStreamRPC"
)

// DemoServiceClient is the client API for DemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoServiceClient interface {
	// 普通RPC
	SimpleRPC(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// 服务端流式RPC
	ServerStreamRPC(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (DemoService_ServerStreamRPCClient, error)
	// 客户端流式RPC
	ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (DemoService_ClientStreamRPCClient, error)
	// 双向流式RPC
	BidirectionalStreamRPC(ctx context.Context, opts ...grpc.CallOption) (DemoService_BidirectionalStreamRPCClient, error)
}

type demoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoServiceClient(cc grpc.ClientConnInterface) DemoServiceClient {
	return &demoServiceClient{cc}
}

func (c *demoServiceClient) SimpleRPC(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, DemoService_SimpleRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) ServerStreamRPC(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (DemoService_ServerStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[0], DemoService_ServerStreamRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceServerStreamRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DemoService_ServerStreamRPCClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type demoServiceServerStreamRPCClient struct {
	grpc.ClientStream
}

func (x *demoServiceServerStreamRPCClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoServiceClient) ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (DemoService_ClientStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[1], DemoService_ClientStreamRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceClientStreamRPCClient{stream}
	return x, nil
}

type DemoService_ClientStreamRPCClient interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type demoServiceClientStreamRPCClient struct {
	grpc.ClientStream
}

func (x *demoServiceClientStreamRPCClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoServiceClientStreamRPCClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoServiceClient) BidirectionalStreamRPC(ctx context.Context, opts ...grpc.CallOption) (DemoService_BidirectionalStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[2], DemoService_BidirectionalStreamRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceBidirectionalStreamRPCClient{stream}
	return x, nil
}

type DemoService_BidirectionalStreamRPCClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type demoServiceBidirectionalStreamRPCClient struct {
	grpc.ClientStream
}

func (x *demoServiceBidirectionalStreamRPCClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoServiceBidirectionalStreamRPCClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServiceServer is the server API for DemoService service.
// All implementations must embed UnimplementedDemoServiceServer
// for forward compatibility
type DemoServiceServer interface {
	// 普通RPC
	SimpleRPC(context.Context, *SimpleRequest) (*SimpleResponse, error)
	// 服务端流式RPC
	ServerStreamRPC(*StreamRequest, DemoService_ServerStreamRPCServer) error
	// 客户端流式RPC
	ClientStreamRPC(DemoService_ClientStreamRPCServer) error
	// 双向流式RPC
	BidirectionalStreamRPC(DemoService_BidirectionalStreamRPCServer) error
	mustEmbedUnimplementedDemoServiceServer()
}

// UnimplementedDemoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServiceServer struct {
}

func (UnimplementedDemoServiceServer) SimpleRPC(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleRPC not implemented")
}
func (UnimplementedDemoServiceServer) ServerStreamRPC(*StreamRequest, DemoService_ServerStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamRPC not implemented")
}
func (UnimplementedDemoServiceServer) ClientStreamRPC(DemoService_ClientStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamRPC not implemented")
}
func (UnimplementedDemoServiceServer) BidirectionalStreamRPC(DemoService_BidirectionalStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamRPC not implemented")
}
func (UnimplementedDemoServiceServer) mustEmbedUnimplementedDemoServiceServer() {}

// UnsafeDemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServiceServer will
// result in compilation errors.
type UnsafeDemoServiceServer interface {
	mustEmbedUnimplementedDemoServiceServer()
}

func RegisterDemoServiceServer(s grpc.ServiceRegistrar, srv DemoServiceServer) {
	s.RegisterService(&DemoService_ServiceDesc, srv)
}

func _DemoService_SimpleRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).SimpleRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemoService_SimpleRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).SimpleRPC(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_ServerStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServiceServer).ServerStreamRPC(m, &demoServiceServerStreamRPCServer{stream})
}

type DemoService_ServerStreamRPCServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type demoServiceServerStreamRPCServer struct {
	grpc.ServerStream
}

func (x *demoServiceServerStreamRPCServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DemoService_ClientStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServiceServer).ClientStreamRPC(&demoServiceClientStreamRPCServer{stream})
}

type DemoService_ClientStreamRPCServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type demoServiceClientStreamRPCServer struct {
	grpc.ServerStream
}

func (x *demoServiceClientStreamRPCServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoServiceClientStreamRPCServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DemoService_BidirectionalStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServiceServer).BidirectionalStreamRPC(&demoServiceBidirectionalStreamRPCServer{stream})
}

type DemoService_BidirectionalStreamRPCServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type demoServiceBidirectionalStreamRPCServer struct {
	grpc.ServerStream
}

func (x *demoServiceBidirectionalStreamRPCServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoServiceBidirectionalStreamRPCServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoService_ServiceDesc is the grpc.ServiceDesc for DemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.DemoService",
	HandlerType: (*DemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleRPC",
			Handler:    _DemoService_SimpleRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamRPC",
			Handler:       _DemoService_ServerStreamRPC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamRPC",
			Handler:       _DemoService_ClientStreamRPC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamRPC",
			Handler:       _DemoService_BidirectionalStreamRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
